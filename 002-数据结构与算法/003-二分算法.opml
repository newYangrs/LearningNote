<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title></title>
    <dateModified></dateModified>
    <ownerName></ownerName>
  </head>
  <body>
<outline text="二分算法">
  <outline text="一、整数二分" _note="-   **二分的本质：**找到一个性质，根据check(mid)找到分界点&#10;&#10;-   **模板：**&#10;&#10;        bool check(int x) {/* ... */} // 检查x是否满足某种性质&#10;        //q[mid]&gt;=x&#10;        // 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：&#10;        int bsearch_1(int l, int r)&#10;        {&#10;            while (l &lt; r)&#10;            {&#10;                int mid = l + r &gt;&gt; 1;&#10;                if (check(mid)) r = mid;    // check()判断mid是否满足性质&#10;                else l = mid + 1;&#10;            }&#10;            return l;&#10;        }&#10;        //q[mid]&lt;=x&#10;        // 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：&#10;        int bsearch_2(int l, int r)&#10;        {&#10;            while (l &lt; r)&#10;            {&#10;                int mid = l + r + 1 &gt;&gt; 1;	//若不向上取整，当l=r-1时，会陷入[l,r]区间的死循环&#10;                if (check(mid)) l = mid;&#10;                else r = mid - 1;&#10;            }&#10;            return l;&#10;        }">
  </outline>
  <outline text="二、浮点数二分" _note="-   **与整数二分不同点：**不需要取边界，只需要达到精度即可&#10;&#10;-   **模板：**&#10;&#10;        bool check(double x) {/* ... */} // 检查x是否满足某种性质&#10;&#10;        double bsearch_3(double l, double r)&#10;        {&#10;            const double eps = 1e-6;   // eps 表示精度，取决于题目对精度的要求&#10;            while (r - l &gt; eps)&#10;            {&#10;                double mid = (l + r) / 2;&#10;                if (check(mid)) r = mid;&#10;                else l = mid;&#10;            }&#10;            return l;&#10;        }">
  </outline>
</outline>
  </body>
</opml>
